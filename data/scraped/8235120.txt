CEO of BellSoft, accomplished expert in Java technology and IT leadership with 10+ years of experience.    Nowadays, there is a universe of open-source projects consisting of code, libraries and binaries from different sources. The open-source code and binaries are freely available from public repositories. In parallel with this rising popularity of open source, however, there has also been a significant increase in security concerns. In recent years, the Java ecosystem has met several unprecedented vulnerabilities that have a direct or indirect effect on all enterprises invested in Java. Log4Shell and Spring4Shell, for example, were very hard to identify and fix due to multilayered nested dependencies. Many software vendors securing a software supply chain have now addressed this issue, but there is still a security gap between binary and source code. Today's software developers and business entities are using more third-party code than ever before, resulting in as high as 70% to 90% of a modern application stack consisting of pre-existing open-source software (OSS), according to a Snyk OSS report. The rise of OSS popularity sharpened the need for better security practices and techniques for code and software. Meanwhile, many IT security companies and vendors focus on overall software supply chain safety; the subject of binary code verification has not been adequately addressed. Nobody can be certain, however, that the binary has not had any hidden malware or botnet code integrated at a build time, whether accidentally or intentionally. To eliminate this potential threat, those using OSS must confirm that the binary code is compiled from the provided source without any additions or modifications. This article presents an overview of this critical issue, providing insights into ensuring that binary code corresponds to the provided copy of the source code. The open-source code refers to the initial code available in a public or private version to view, use, modify and distribute under a license. To make this code available for machine reading, it gets compiled to its binary version. Compilation of a code, in most cases, is a one-way operation due to many optimizations done by a compiler, and there is no practical way to verify this in fully precompiled and packaged software. To ensure that the code or any other binary component is not malicious or compromised, you must verify it against the initial code. Binary code verification belongs to the IT security field. IT security responsibility lies on both sides: the software provider and the software user. As Snyk's report cited above states, only 59% of organizations feel secure about their software. The percentage of those with security policies for OSS is approximately the same. Software security is managed differently for the government, military and organizations with a high level of protection. These entities do not share information on how the security checks are performed. They might arrange for direct access to the code and have additional vendor obligations in place. They also might be compiling a code internally to ensure it is fully secured. Overall, this information is hidden from the public. Another part of the responsibility for software product security lies with the vendor. A company producing the software carries liability for its product and, ideally, should confirm the binary code before implementing its components into its own software application. Open-source companies or final users generally obtain code from two sources: open-source repositories and open-source vendors. Depending on the source, the software either comes with verification or it doesn't. In general, the code from public repositories remains available without any verification. Moreover, the code comes as it is and is not technically supported. Therefore, the security point for such code is becoming more concerning. Binary verification by a third party is recommended when taking code from public repositories. IT security companies present few verification methods, with binary or snipper analysis being the most well-known. Binary analysis, a type of code check, looks at files composed of binary code and assesses their content and structure without access to source code. While these methods do provide an overall security check on binary code, they cannot guarantee complete correspondence of binary to source code. Code from a vendor has its evident advantage, as many open-source vendors provide verification or check tools. Security issues are most dominant in the open-source niche, and delivering secure, verified software should be the highest priority for leading vendors. Such companies offer more than just verification or supply chain security; they also provide technical support for OSS so that the end user does not stand alone with his problems and the source code. Binary verification is not simple, so vendors confirming the correctness of binary code invest extra time and effort into the security process. Usually, a company working on its software solution must verify the whole supply chain, not only part of the code. In the ongoing quest for more tightened security in software products, paying attention and confirming complete verification of binary code used remains a must. When choosing verification for the binary code, it is worth remembering that despite the variety of modern binary scanners, no one scanner can guarantee a hundred-percent confirmation. These tools will highlight vulnerabilities and discrepancies in the code for which they are programmed, but they might miss some code mistakes not taken into account by that particular scanner. The undocumented capabilities embedded into the binary on build time, or even by the compromised compiler, could get missed by security scanners. The only way to fully ensure compliance with the binary system is to rebuild the code. Some of the most prominent software vendors provide a reproducible build environment that allows the end user to perform the check. This approach allows complete verification and ensures software security. Therefore, choosing open-source software from a vendor verifying the code is likely the most secure choice. By integrating only verified binary code, we can build a more responsible attitude toward software security and safeguard ourselves from potential threats. Forbes Technology Council is an invitation-only community for world-class CIOs, CTOs and technology executives. Do I qualify? 
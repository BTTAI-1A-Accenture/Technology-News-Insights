Ninety five percent of the population will say Apple computers is the brainchild of [Steve Jobs]. The other five percent will be right, but what nearly no one knows is that the Macintosh project was originally conceived by [Jef Raskin]. He holds the honor of turning the Mac into an, ‘information appliance’ and being one of the first people to seriously consider how millions of people would interact with computers. The Mac wasn’t [Jef]’s first project at Apple, though. Before the Mac project he was working on something called Swyft – an easy to use command line system that was first implemented as a firmware card for the Apple IIe. [Mike Willegal] was kind enough to bring one of these Swyft cards to the Vintage Computer Fest this weekend, and did a demo of it for us. The basic idea behind the Swyft card was to have an integrated word processor, calculator, and access to Applesoft Basic. Holding down a ‘leap’ key – in the case of the Apple IIe add-on, the open apple key – allowed the user to search for text and perform operations on any result. It’s odd, but it just makes sense in some strange way. [Mike] is doing a build class at the VCF today where anyone attending can build their own Swyft card. He also has instructions for building your own, should you want to experiment with one of the ‘could have beens’ of user interface design.   That’s awesome. I remember learning to type in school on a IIe and the typing software had zero editing features. Your only option was to backspace to the point you wanted to make the fix. With that in mind this card is genius. YES!  A regular Apple ][ had 16K ram standard.  That’s 1/64th MB.  Loaded was 48K and aftermarket tricked out was 64K. There wasn’t room to have much going on, so you’d be swapping floppies to:
boot up
change programs
save typed data.
load a different part of the same program you’re working with. Back then, you *expected* to lose your work due to crashes, hangs, floppy dust, “I/O error” and whatnot.  And floppies were slooooooowwwwwww. “How often should I save?”
“Whenever you’ve done enough that it’s faster than retyping your work.” We would have paid a lot to not have to mess around with swapping floppies in and out to change between application, data and system disks.  Not to mention, the instant loading of programs, because they’re right there already. All those memories of pulling out the disk controller card from slot #6, cleaning the contacts with an eraser and reseating it.  That’s how you fixed errors, kids.  And if you did it with the apple still on, you blew the mobo. IIRC there is a description of the SwyftCard and Raskin’s further work on the Canon Cat in the seminal work “Programmer’s At Work”. The SwyftCard was written in a custom dialect of Forth (tForth) — as was the Cat.  It was a really interesting an innovative idea.  Unfortunately it also showed the limits of a single dogmatic idea. What most people remember (if they remember everything) is that all navigation was done through incremental search using the forward and back leap keys.  This lead to some slightly odd solutions, such as that going to the end of a document involved hitting the forward leap key and then entering gibberish so that the search would take you to the end.  Going to the top of the document involved the same procedure, but using the backward leap key. Raskin believed that filesystems with multiple files lead to user confusion, so both the SwyftCard and the Cat had a strict policy of one file, on floppy where the entire contents of memory were dumped to/from the disk.  This pushing the file management question to the physical world, which Raskin felt people were more familiar with.  This did mean that if you were writing a novel using the swyftcard, you put one chapter per floppy.  Not horribly unusual in the days of floppies, but at a time when hard drives were coming into vogue it seems a bit short sighted. To be fair in “The Humane Environment” he did posit a way to support multiple files and large storage devices, where there was still only one physical file, but that individual sections would be market with a special character and then you would use the leap keys to search for it. Raskin’s ideas of UI efficiency were based on optimizing for touch typists, actually I would say accomplished touch typists — which is fine but seems to give no real attention to the dyslexic, or with physical or mental difficulties that would interfere with touch typing. I am not trying to dismiss Raskin as a crank, more trying to give a more complete idea of how his systems worked.  I have great respect for the man and what he he did, but far from agree with all of his philosophy.  Instead I find Raskin to be one of those people you read, and then try to know exactly why you disagree with him. There’s a mix between good ideas and avoidance of (what he perceived to be) bad ideas in his designs. That can work as long as one have no need for anything but the most basic features when working however when one need to do something not integrated into the design it just collapses into a mess.
IMHO the problem with interface design is to smoothly transition between the simple mode and the advanced mode, making it natural and intuitive*. Too bad that problem is a bloody hard one. :)
(* intuitiveness is IMHO overrated, discoverability is more important – still important though) According to Mr Raskin, intuitive=familiar. Not always a good thing. He was an interesting man with interesting ideas.
http://www.asktog.com/papers/raskinintuit.html
As to his taking credit for group ideas, I’ve been in meetings where I’ve proposed something totally different and in the process of explaining my idea someone else in the group jumped in with my exact idea and claimed it as theirs.  That’s just an artifact of “groupthink” and is what happens during meetings. I’ve no doubt Raskin initially proposed those ideas. That was a common gag in the “Wonderbug” segments of the Krofft Supershow. Susan had all the ideas, but the two guys would nix it. Then one of them would say the exact same thing and Susan would say “I wish I’d thought of that!”. Why is this card needed, instead of just loading the software in the normal way?  Is it just that it won’t fit in RAM?  In that case, wouldn’t a RAM card be better? The idea was to turn the Apple //e into Raskin’s vision of an Information Appliance (the name of his company).  With the card you could boot into the Swyft environment without doing anything extra.  It also served nicely as a form of copy protection since the app would never be stored on a disk The card resulted from prototyping the Swyft ideas on an Apple IIe. It worked so well that is was made a product to market test the Swyft (later Cat). Part of the paradyme includes any disk put in a slot would be automatically loaded to the work space. To do this on the Apple II, the boot process had to be intercepted and a disk checked to see if it was a Swyft disk format or Apple DOS format. Thus the need for a card. Later there was also a Swyftware version for education. A lot of creative writing classes used the cards because it was so easy for kids to learn. (I don’t think you will find a stupid reason or mistake in anything Jef did. You can see his Apple II and some Swyft/Cat stuff here http://www.regnirps.com/Apple6502stuff/apple_iie_cat.htm). The Apple ][ loaded the system from floppy. The programs were loaded from a different floppy.  The user data was loaded from yet another floppy.  You had to keep swapping floppies, and *wait*.   “Chunk, chunk, chunka-chunka chunk chunk, chunk-chunk.” saving done.  And if you’ve ever worked with one, you just heard the same 7 seconds in your head that I did.  You heard the same sounds so often, you could tell by ear if it was a bad disk, or corrupted data, or a corrupt FAT table, or if the drive was just dead.  And, of course, pray that the floppy remembered your stuff.  And that your floppy wasn’t defective.  And that nobody elses floppy was defective and crudded up the floppy read/write head. It was common to swap floppies to load different parts of the same program. The standard Apple ][ had 16K ram.  That’s 1/64th of a megabyte.  A loaded Apple][ had 48K, and a tricked out aftermarket version had 64K, the max addressable by the 6502 processor.  You were really rocking when you had twin floppies, because you could leave one disk in for constant access to the program, and also leave your data disk in.  I think the disks held about 360K each. Later, people figured out RAM page switching and I’ve seen 128K Apple clones. The first HDD I ever saw hooked to an Apple ][ was 10MB.  It was at a university, and shared by all the students in class, and I’m pretty sure that was an Apple //e. THIS is the environment from where “nobody will ever need more than 640K of RAM” came from.  I don’t even know if Moore’s Law was even around yet.  It certainly wasn’t yet ‘common sense’. No shit, people actually said “What the hell are you going to do with 64K of RAM?  It’s a waste of money!”  And at the time, they were right. That must have been an early Apple II, and definitely not running Forth if you needed all that goofing around. Apple Pascal perhaps? You need a II+ or IIe for the Swyftcard. They all had 64K+ through the RAM card and Swyftware worked with one drive and no card. It copied Swyftware to boot from any diskette you used for Swyftware. I used to have an Apple IIe platinum with an 8MHz accelerator. A Swyftcard would recognize any Swyft format disk and boot Swyft. If not, it passed boot on and a Profile HD and loaded the KIX OS. This was so handy I even upgraded to a CFII board made by one of the guys who used to be in Apple II DTS for pretty much instant power on boot. That was about 10 years ago. I have not looked at it since fast ARMs with embedded Linux on 10×10 cm boards started showing up about the same time. 64M RAM 256M NAND. How did we get by without it? Apple II disks used a different encoding than other computers of the time, and were thus 280KB.  Apple Language Card gave you 16KB over the motherboard’s maximum of 48KB, but was quickly surpassed by the likes of Saturn 128KB and other expansions.  All of which worked by swapping out the basic interpreter and monitor roms for ram (thanks to Woz’s brilliant notion to include a rom inhibit line.)  This card looks like it defaults to inhibiting the onboard roms upon reset, so it can take over the boot sequence prior to the Disk II card which is normally in higher priority slots 5 or 6.  Now I’m tempted to add support for this card to some of my emulators. A form of RLL invented by Woz. 140K then improved to 160K (Apple Disk II I assume you mean). …then there’s this really tiny percentage of people who know that without the Woz, Apple likely wouldn’t exist at all, and the world would be a very different place today. /seriously, why is it that in articles about the Apple (and/or Apple the company), is the other Steve rarely mentioned? I’m not discounting what Jobs did; without him, the company wouldn’t exist either. But it wasn’t like he was the only guy slaving over a soldering iron back in the day… I look at the path that Jobs took versus the path that Woz took. When both received stock, Woz gave some of his to others at Apple. Jobs kept all of it. Woz became a teacher after Apple. Jobs got into a political fight, was forced out, then came back taking a lot of credit for a lot of work.
Given the choice, I’d like to think I’d take the Woz path Woz’s path was partly chosen by necessity. After he ran his plane off the end of the runway and received a serious head injury in 1981, he was not the creative genius he had been. He basically lost his memory. Plus others have said he disliked the conflict in arguing with Jobs. Otherwise we would have had an ARM based Apple II, which was apparently prototyped and outperformed the Mac. (Might have been a PC killer. Look where ARMs are now?) Andy Hertzfeld always accused Raskin of taking sole credit for Apple projects. The Macintosh project was a team effort, it was not the brainchild of any sole individual. In my opinion Hertzfeld is right.  Raskin was fond of saying he was the creator of the Mac, or sometimes the creator of the original mac which is more accurate.  If you go back through the articles and books written (folklore.org, Insanely Great, etc) Raskin’s original vision was for a 6809 based computer with 64K that had a UI like that of the SwyftCard or the Canon Cat. Raskin is most correctly the creator of the Mac project.  Many of his ideas and inspirations made their way into the Mac but he wasn’t the force behind what we know of as the Mac today. The irritating divorce from the file system makes the transition from the PC world awkward at best. The Mac has a personality and it was developed by characters.
Raskin was the creator of the Mac in the same sense that Jobs was the creator of Apple. Overstated? Definitely. Raskin did the proof that you can do everything with a one-button mouse, that menus across the top that have “infinite depth” produce a lot less errors and fatigue than contextual menus (the PARC way), that monotony and modelessness increased discovery and reduced errors. Basically he formalized his ideas. He wrote a thesis on graphical interfaces in 1967 – IIRC it had “Quickdraw” in the title. He was also a no-smoker, non-drinker or drug user at a time when the Mac team were awash in mind altering substances (and Tog of course, who I see referenced in an earlier post). I wonder who had the better memory of events? He was kicked off the project and he had at various times published his Book Of Macintosh — the design document for his version of the project.  It is probably still out there if you look. Or you can read some of his books, which also talk about his vision for the Mac.  The 128K mac and what he envisioned are different things.  It isn’t just some argument over people’s memories. Raskin had many good ideas and he had many bad ideas.  He got the mac project rolling, and for that (and many other things) we should be grateful for him.  But to recognize him we don’t need to make others losers, or to declare Raskin the loser.   Every one of the people on the Mac team were flawed people.  They all had great ideas they all had poor ideas.  Jef Raskin really got to make his ideal system in the form of the Canon Cat (and later in the form of the portable Cat).  He published a whole book about his ideal user interface (The Humane Interface).   I am glad his vision didn’t take over, but there is much to learn from his ideas. I would not call Jobs seeing your project and taking over quite the same as being “kicked off”, which implies incompetence. Jobs and Raskin were inseparable with many long discussions on human interface and the possibilities of future developments, until a falling out and Jef’s banishment to a distant suite with a group of loose canons where they were ignored until Jobs heard something interesting was going on. Raskin’s personal assistant was with him from Bannister&Crum to Apple and IAI and she has a pretty good memory (and was married to Tog for a while). Employee 37 I think. Maybe that was Jef. Oft repeated conjectures have led to a lot of lore that has been muddied further by various books rife with errors. “They all had great ideas they all had poor ideas.” If only the Apple Double file system had been tagged as one of the poor ideas and dropped. It’s as if Apple specifically set out to design a method of storing files to be incompatible with every other operating system extant at the time and into the future, and also incompatible with telecommunications. That’s why MacBinary and BinHex exist. MacBinary to be able to transfer files to and through other systems, and the same for BinHex but encoded using only bytes with 0 as the 8th digit. Why? Because ASCII and the original Internet, being invented in the USA, were designed around the use and transmission of English text. The standard ASCII characters needed for English, the 26 letters, the numbers, basic punctuation and a few control codes all have a 0 at the 8th bit. (Extended ASCII using all 8 bits includes all the characters required for most western European languages, except for one or two used in Norwegian.) That made it easy to save 1/8th of the data bandwidth on the early Internet by simply not transmitting the 8th bits, they were just assumed to be zero. By the time the Internet went international, and the World Wide Web came along, there were still some 7 bit routers out there. If a MacBinary file went through a 7 bit router, it got munched into gibberish with every 8th bit converted to a zero. Thus BinHex, and most Mac software download sites offering both formats and small test files in both, with BinHex files being about 1/8th larger. Quite important when users were charged by connect time and/or kilobytes downloaded. Anyone else remember the instructions to first download the small MacBinary file then unstuff it, and if that failed, download the small BinHex file? If that failed too, complain to your service provider because something had to be seriously screwed up if a BinHex download got corrupted. The Canon Cat was the carob of the computer world: fine once you appreciate it for what it is rather than as an imitation something-else. It’s biggest fault was simply arriving much too late; the files-and-folders paradigm was already well-entrenched by then. It’s been ages since I played with one (had to sell it during a lean period), but as I recall the idea of line and page breaks was extended into higher levels of abstraction: chapter and document breaks, and at the document level one could attach metadata (essentially like a filename). So for example you’d Leap Forward + Chapter Break to advance to the next chapter in a large document, or could Leap + Document Break + type document name to “load” a specific document. “Load” in quotes because you didn’t actually load files, everything’s all loaded simultaneously, this would just take you to that part. Like I said, carob. In context, given the typical WordStar crap of the era, it was really quite a potent idea. One comment Phil.  At the time disks and floppies were slow and the leap on a Cat was instant in a human perspective. This was the advantage over disk based file systems at the time. I am so used to what Jef called the “hand to mouse existence” today that I hardly notice. But once in a while I recall the ease and quickness of leaping and selecting and copying or pasting of a Cat and I really miss it. I would love to have a customized keyboard and Swyftware for Linux. Update to encapsulating Python instead of Forth in your text and you could have some fun. The article text here implies a timeline. Note that Information Appliance and the Swyft and Cat came after Raskin left Apple. FYI there were Apple computers before the Macintosh. Yep. Raskin wrote the Apple II teach yourself BASIC manual that has been a benchmark for documentation ever since. great info brian… on technical Swyft Card……. When I would be asked about the beginning of Apple computers, Macintosh wouldn’t come to mind come to mind; even if I knew the answer that was expected I’d have given the wrong answer because I wouldn’t  be thinking Macintosh. I actually have a fully populated memory board for an apple IIe with 1MB of ram in total on it, Just need a Apple IIe to put it in. Your email address will not be published. Required fields are marked * Comment *  Name *  Email *  Website   

  Δ Please be kind and respectful to help make the comments section excellent. (Comment Policy) This site uses Akismet to reduce spam. Learn how your comment data is processed. 
						By using our website and services, you expressly agree to the placement of our performance, functionality and advertising cookies. Learn more
 Encryption transforms data into a form that can be read only by someone who has a key that allows them to decrypt it. You can use encryption to protect data “at rest” (data that resides in a data store) or to protect data “in motion” (data that is being sent over a network). This article will examine how we can work with two types of encryption in C#, symmetric encryption and asymmetric encryption. Symmetric encryption uses one key for both encryption and decryption. Asymmetric encryption uses two distinct keys for encryption and decryption. To work with the code examples provided in this article, you should have Visual Studio 2022 installed in your system. If you don’t already have a copy, you can download a copy from here. First off, let’s create a .NET Core console application project in Visual Studio 2022. Assuming Visual Studio 2022 is installed in your system, follow the steps outlined below to create a new .NET Core console application project. This will create a new .NET 7 console application project in Visual Studio 2022. We’ll use this project to work with encryption in the subsequent sections of this article. Encryption is of two types: symmetric encryption and asymmetric encryption. Both symmetric and asymmetric encryption can help protect sensitive data residing in your data store or in transit. C# provides built-in support for symmetric and asymmetric encryption through the System.Security.Cryptography namespace. Whereas symmetric encryption uses only one key for encrypting and decrypting data, asymmetric encryption uses two keys: a public key used for encrypting the data and a private key used for decrypting the data. Symmetric encryption is generally faster and more efficient, but you must keep the key secret, because anyone with access to the key can decrypt the data. Asymmetric encryption is slower than symmetric encryption, but it’s also much more secure because the decryption key is not shared. Only the person possessing the private key will be able to decode the data. The differences between symmetric and asymmetric encryption make them suitable for different use cases, as Microsoft points out here in the .NET documentation: Symmetric encryption and asymmetric encryption are performed using different processes. Symmetric encryption is performed on streams and is therefore useful to encrypt large amounts of data. Asymmetric encryption is performed on a small number of bytes and is therefore useful only for small amounts of data. This explains why symmetric encryption is often used to protect data sent over the network (such as an email) while asymmetric encryption is often used to protect sensitive data such as social security numbers, passwords, and credit card numbers. In the following sections, we’ll encrypt and decrypt a string using C#, first with symmetric encryption and then with asymmetric encryption. We’ll use a string as the data in our examples to keep things simple. To implement symmetric encryption, you will need to generate a 256-bit key for encrypting and decrypting data. Symmetric encryption is faster than asymmetric encryption but less secure because you can use the same key for encrypting and decrypting data. The receiver uses the same shared secret to decrypt the message after receiving it from the sender. If the key is not shared securely, a third party could use it to decrypt and read the data. In the console application project you created earlier, create a static C# class named SymmetricEncryptionDecryptionManager in a file named SymmetricEncryptionDecryptionManager.cs and enter the following code. In the preceding code listing, notice there are two methods, Encrypt and Decrypt. The Encrypt method accepts the data to encrypt and the secret key as parameters. It leverages the Advanced Encryption Standard (AES) algorithm to perform symmetric data encryption using the secret key. The encrypted data is returned in the form of a Base64 string. The Decrypt method accepts the encrypted data and the secret key as parameters. It converts the cipher text to a byte array, which is used to decrypt the data using the secret key. The decrypted data is returned as a string. You can use the following code snippet to encrypt and decrypt data using the Encrypt and Decrypt methods ofthe SymmetricEncryptionDecryptionManager class.
 In asymmetric encryption, two different keys are used to encrypt and decrypt data. The public key is used to encrypt, and the private key is used to decrypt. You must have both a public key and a private key to implement asymmetric encryption. To encrypt data using asymmetric encryption, you first need to generate a public/private key pair. You can do this using the RSA algorithm as shown below. Once you have generated the key pair, you can use the public key to encrypt data. Then, to decrypt the data, you will need to use the private key. Let us create a new class named AsymmetricEncryptionDecryptionManager with the following code. You can use the following code snippet to encrypt and decrypt data using the Encrypt and Decrypt methods of the AsymmetricEncryptionDecryptionManager class. Figure 1 below shows the output when you execute the above program. Figure 1. A demonstration of asymmetric encryption in .NET. Note that you can merge both SymmetricEncryptionDecryptionManager and AsymmetricEncryptionDecryptionManager into one class and write overloaded methods for symmetric and asymmetric encryption and decryption. You can use this knowledge to build secure applications or websites that protect data from unauthorized access. Joydip Kanjilal is a Microsoft Most Valuable Professional (MVP) in ASP.NET, as well as a speaker and the author of several books and articles. He received the prestigious MVP award for 2007, 2008, 2009, 2010, 2011, and 2012.
He has more than 20 years of experience in IT, with more than 16 years in Microsoft .Net and related technologies. He has been selected as MSDN Featured Developer of the Fortnight (MSDN) and as Community Credit Winner several times.
He is the author of eight books and more than 500 articles. Many of his articles have been featured at Microsoft’s Official Site on ASP.Net.
He was a speaker at the Spark IT 2010 event and at the Dr. Dobb’s Conference 2014 in Bangalore. He has also worked as a judge for the Jolt Awards at Dr. Dobb's Journal. He is a regular speaker at the SSWUG Virtual Conference, which is held twice each year.  Joydip Kanjilal is a Microsoft Most Valuable Professional (MVP) in ASP.NET, as well as a speaker and the author of several books and articles. He received the prestigious MVP award for 2007, 2008, 2009, 2010, 2011, and 2012. He has more than 20 years of experience in IT, with more than 16 years in Microsoft .Net and related technologies. He has been selected as MSDN Featured Developer of the Fortnight (MSDN) and as Community Credit Winner several times. He is the author of eight books and more than 500 articles. Many of his articles have been featured at Microsoft’s Official Site on ASP.Net. He was a speaker at the Spark IT 2010 event and at the Dr. Dobb’s Conference 2014 in Bangalore. He has also worked as a judge for the Jolt Awards at Dr. Dobb's Journal. He is a regular speaker at the SSWUG Virtual Conference, which is held twice each year. 
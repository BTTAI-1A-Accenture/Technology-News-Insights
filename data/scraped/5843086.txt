 Low-code/no-code visual programming tools promise to radically simplify and speed up application development by allowing business users to create new applications using drag and drop interfaces, reducing the workload on hard-to-find professional developers. A September 2021 Gartner report predicted that by 2025, 70% of new applications developed by enterprises will use low-code or no-code technologies, up from less than 25% in 2020. Many customers find the sweet spot in combining them with similar low code/no code tools for data integration and management to quickly automate standard tasks, and experiment with new services. Customers also report they help business users quickly test new services, tweak user interfaces and deliver new functionality. However, low code/no code is not a silver bullet for all application types and can require costly rewriting if a customer underestimates the degree to which applications must scale or be customized once they reach production. So there’s a lot in the plus column, but there are reasons to be cautious, too. Here are some examples of how IT pros are using low code/no code tools to deliver benefits beyond just reducing the workload on professional developers. Sendinblue, a provider of cloud-based marketing communication software, uses low code workflow automation, data integration and management tools to quickly experiment with features such as new pricing plans, says CTO Yvan Saule. Without low code, which allows him to test new features at 10 to 15% of the cost of traditional development, “we couldn’t afford all the experiments we’re doing,” he says. “If we had to write 15 different pricing systems, it could’ve taken years,” requiring backend fulfillment systems and credit checks for each specific price. Financial technology and services company Fidelity National Information Services (FIS) uses the low code WaveMaker to develop the user interfaces for the customer-facing applications it builds for its bank customers, using APIs to connect those applications to the customer’s or FIS’ back-end systems. “It’s for speed to market,” says CTO Vikram Ramani. This approach is especially valuable given the shortage of skilled developers. While FIS is still evaluating the results, Ramani says they expect at least a 20 to 30% speed improvement. Vikram Ramani, Fidelity National Information Services CTO Fidelity National Information Services  And among low-code tools, for instance, FIS chose WaveMaker because its components seemed more scalable than its competitors, and its per-developer licensing model was less expensive than the per runtime model of other tools. At Joist, a startup developing financial and sales management software for contractors, CEO Rohan Jawali is using the no code AppMachine platform to quickly build application prototypes, get customer feedback, and then build the actual application in order to skip a few iterations in the design process. At a previous employer, he could spin out a simple information and contact sharing mobile app for construction workers in a couple days compared to several weeks using conventional languages. Tapping the content management system within AppMachine made it easy for users to upload the required data into it, he says. At bottled water producer Blue Triton Brands, Derek Lichtenwalner used Microsoft’s low code Microsoft Power Apps to build an information sharing and communications application for production workers. Before becoming an IS/IT business analyst in early 2022, Lichtenwalner had no formal computer training, but was able to build the app in about a month. It’s now in use at six facilities with about 1,200 users, with plans to expand it to 3,000 at the company’s 27 facilities. Derek Lichtenwalner, IS/IT business analyst, Blue Triton Brands Blue Triton Brands Using non-IT users such as Lichtenwalner to develop apps that share information and automate processes is a good option for industries with small staffs of skilled developers, such as construction, where “there are many processes that need to be digitized and low code and no code can make that easier,” says Jawali. Some vendors and customers are using low code/no code concepts to ease not only app development, but data sharing among apps. Sendinblue, for example, abstracts its application programming interfaces (APIs) into reusable widgets. By mapping its APIs with those used by its customers’ systems, says Saule, his developers “can drag-and-drop the integration functions, and build new capabilities atop that integration.” Low code/no code “can be an IT professional’s best friend for traditional, day-to-day challenges such as workflow approvals and data gathering,” says Carol Dann, VP information technology at the National Hockey League (NHL). But she warns against trying to use such a tool for a new application just because it’s enjoyable to use. And choosing the wrong solution can backfire quickly, she adds, with any quick wins erased by the need to code or work around the shortcomings. Carol Dann, VP information technology, National Hockey League NHL “No code is a good fit when you have a simple application architecture and you want to quickly deploy and test an application,” adds Jawali. It’s best, he says, in “innovative experiments where you want a lot of control over the user experience, user interface—something you can’t get with a low code platform. Low code is more useful when you need to introduce more security and links to other applications, but at the cost of greater complexity and the need for more technical developers.” The drag and drop simplicity of no code makes it difficult to achieve that final percent of differentiation that makes an application useful for a specific organization, and makes low code a better fit, says Mark Van de Wiel, field CTO at data integration software provider Fivetran. That extra customization might include, for example, the use of fuzzy logic to correct misspelled names in a customer database or the business logic needed to calculate a one to 10 score of the effectiveness of various marketing assets based on metrics such as views versus click-throughs. Low code/no code apps can also be difficult to scale, says Saule. He recommends limiting their use to non-core strategic parts of the business, and when you want to experiment. “When an experiment succeeds and needs to scale is when it’s time to think about rewriting it,” he says, but in a more traditional yet scalable language. Just because no code/low code lets more users create their own applications doesn’t mean they should, says Van de Wiel. At Fivetran, an analytics group prepares the marketing effectiveness dashboards used by the rest of the organization. “This allows our employees to focus on what they’re good at,” he says, rather than wasting time creating duplicate dashboards, or wasting money tying up IT infrastructure downloading the same data. Organizations allowing extensive DIY app development must also ensure this larger pool of non-professional developers follows corporate and regulatory requirements to protect customer data, he says. AppMachine was a good fit for the information-sharing apps Jawali developed because they must only serve hundreds of users rather than tens of thousands or more. It’s less suited to applications that require high levels of security, he says, because it can’t create the user profiles needed for role-based access. It also lacked support for the APIs required to connect to other applications such as product or issue management systems, or delivery tracking applications. “Trouble can seep in when folks try to make tools do things they weren’t really meant to do rather than concluding it’s not the right fit,” says Dann. Developing a close relationship with the vendor’s customer success managers and understanding everything the tools have to offer—what the tool does well and what it was never intended to do—are critical to make well educated decisions. “Saying, ‘No, that’s really not what our platform does’ is a perfectly acceptable answer from a vendor,” she says. Among other assessment questions, Dann recommends asking if a no code/low code vendor is willing to take part in an information security review, whether their solution has a robust API to integrate with other applications and whether it has an authentication and authorization strategy that fits with the customer’s security processes. If you think of low code/no code as a strategy to simplify development rather than a product category, you can find opportunities to speed app development with software you already own, or with off-the-shelf capabilities in familiar products such as cloud storage. This is especially true for routine, well-defined functions such as managing documents and workflows. The NHL configured the integration capabilities of its Monday.com workflow management system as a low code/no code solution to replace a legacy system for channeling requests to its creative staff. It deployed this replacement system in about two weeks, compared to at least six months using traditional development methods, says Dann. The league met another need—alerting its scouts to new information about promising players—by configuring the Box Relay no code workflow automation tool in the Box cloud-based data storage service to automatically assign tasks and move documents to the proper folders once they were processed. “This took the whole process out of email and streamlined workflow,” she says, “by using a ‘what you see is what you get’ interface rather than writing code.”         Used properly, low code/no code tools can speed new apps to customers and employees while slashing costs and delays. They can also prevent security or policy breaches, or the need to rewrite an application that can’t scale if it’s successful. But like any tool, understanding what they can and can’t do—and what you need them to do—is essential. Sponsored Links